// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkOrder.Infra.Contexts;

namespace WorkOrder.Infra.Migrations
{
    [DbContext(typeof(SaasContext))]
    [Migration("20180805170413_WorkOrder.Victor.V1")]
    partial class WorkOrderVictorV1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WorkOrder.Domain.AccountContext.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<int>("Role");

                    b.Property<Guid>("TenantId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.CustomField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CustomFormId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Description");

                    b.Property<int>("EntityStatus");

                    b.Property<bool>("Mandatory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<Guid>("TenantId");

                    b.Property<int>("Type");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CustomFormId");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomFields","dbo");
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.CustomFieldAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CustomFieldId");

                    b.Property<Guid?>("CustomFieldOptionId");

                    b.Property<Guid>("CustomFormAnswerId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("TenantId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId");

                    b.HasIndex("CustomFieldOptionId");

                    b.HasIndex("CustomFormAnswerId");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomFieldAnswers","dbo");
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.CustomFieldOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CustomFieldId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name");

                    b.Property<Guid>("TenantId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomFieldOptions","dbo");
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.CustomForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<Guid>("TenantId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("CustomForms","dbo");
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.CustomFormAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CustomFormId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<Guid>("TenantId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CustomFormId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomFormAnswers","dbo");
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.FormPageComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid>("CustomFormId");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<int>("Order");

                    b.Property<Guid>("PageComponentId");

                    b.Property<Guid>("TenantId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CustomFormId");

                    b.HasIndex("PageComponentId");

                    b.HasIndex("TenantId");

                    b.ToTable("FormPageComponents","dbo");
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.PageComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("PageComponents","dbo");
                });

            modelBuilder.Entity("WorkOrder.Domain.SharedContext.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<int>("AddressType");

                    b.Property<string>("City");

                    b.Property<string>("Complement");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.Property<string>("Neighborhood");

                    b.Property<string>("Number");

                    b.Property<string>("PublicPlace");

                    b.Property<string>("State");

                    b.Property<Guid>("TenantId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Address","dbo");
                });

            modelBuilder.Entity("WorkOrder.Shared.Entities.AppTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36);

                    b.Property<string>("AppName");

                    b.Property<string>("ConnectionString");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<int>("EntityStatus");

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("Theme");

                    b.Property<DateTime?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Hostname")
                        .IsUnique();

                    b.ToTable("Tenants","dbo");
                });

            modelBuilder.Entity("WorkOrder.Domain.AccountContext.Entities.User", b =>
                {
                    b.HasOne("WorkOrder.Shared.Entities.AppTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("WorkOrder.Domain.SharedContext.ValueObjects.EmailVo", "Email", b1 =>
                        {
                            b1.Property<Guid?>("UserId");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnName("Email")
                                .HasMaxLength(255);

                            b1.HasIndex("Address")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.HasOne("WorkOrder.Domain.AccountContext.Entities.User")
                                .WithOne("Email")
                                .HasForeignKey("WorkOrder.Domain.SharedContext.ValueObjects.EmailVo", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("WorkOrder.Domain.SharedContext.ValueObjects.NameVo", "Name", b1 =>
                        {
                            b1.Property<Guid?>("UserId");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnName("FirstName")
                                .HasMaxLength(255);

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnName("LastName")
                                .HasMaxLength(255);

                            b1.ToTable("Users");

                            b1.HasOne("WorkOrder.Domain.AccountContext.Entities.User")
                                .WithOne("Name")
                                .HasForeignKey("WorkOrder.Domain.SharedContext.ValueObjects.NameVo", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("WorkOrder.Domain.SharedContext.ValueObjects.PasswordVo", "Password", b1 =>
                        {
                            b1.Property<Guid?>("UserId");

                            b1.Property<string>("ConfirmPassword");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnName("Password")
                                .HasMaxLength(30);

                            b1.ToTable("Users");

                            b1.HasOne("WorkOrder.Domain.AccountContext.Entities.User")
                                .WithOne("Password")
                                .HasForeignKey("WorkOrder.Domain.SharedContext.ValueObjects.PasswordVo", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("WorkOrder.Domain.SharedContext.ValueObjects.PhoneVo", "Phone", b1 =>
                        {
                            b1.Property<Guid?>("UserId");

                            b1.Property<string>("Number")
                                .HasColumnName("Phone");

                            b1.Property<int>("Type");

                            b1.ToTable("Users");

                            b1.HasOne("WorkOrder.Domain.AccountContext.Entities.User")
                                .WithOne("Phone")
                                .HasForeignKey("WorkOrder.Domain.SharedContext.ValueObjects.PhoneVo", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.CustomField", b =>
                {
                    b.HasOne("WorkOrder.Domain.CustomFormsContext.Entities.CustomForm", "CustomForm")
                        .WithMany("Fields")
                        .HasForeignKey("CustomFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkOrder.Shared.Entities.AppTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.CustomFieldAnswer", b =>
                {
                    b.HasOne("WorkOrder.Domain.CustomFormsContext.Entities.CustomField", "CustomField")
                        .WithMany()
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkOrder.Domain.CustomFormsContext.Entities.CustomFieldOption", "CustomFieldOption")
                        .WithMany()
                        .HasForeignKey("CustomFieldOptionId");

                    b.HasOne("WorkOrder.Domain.CustomFormsContext.Entities.CustomFormAnswer", "CustomFormAnswer")
                        .WithMany("CustomFieldAnswers")
                        .HasForeignKey("CustomFormAnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkOrder.Shared.Entities.AppTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.CustomFieldOption", b =>
                {
                    b.HasOne("WorkOrder.Domain.CustomFormsContext.Entities.CustomField", "CustomField")
                        .WithMany("Options")
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkOrder.Shared.Entities.AppTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.CustomForm", b =>
                {
                    b.HasOne("WorkOrder.Shared.Entities.AppTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.CustomFormAnswer", b =>
                {
                    b.HasOne("WorkOrder.Domain.CustomFormsContext.Entities.CustomForm", "CustomForm")
                        .WithMany()
                        .HasForeignKey("CustomFormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkOrder.Shared.Entities.AppTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WorkOrder.Domain.AccountContext.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WorkOrder.Domain.CustomFormsContext.Entities.FormPageComponent", b =>
                {
                    b.HasOne("WorkOrder.Domain.CustomFormsContext.Entities.CustomForm", "CustomForm")
                        .WithMany()
                        .HasForeignKey("CustomFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkOrder.Domain.CustomFormsContext.Entities.PageComponent", "PageComponent")
                        .WithMany()
                        .HasForeignKey("PageComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkOrder.Shared.Entities.AppTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WorkOrder.Domain.SharedContext.Entities.Address", b =>
                {
                    b.HasOne("WorkOrder.Shared.Entities.AppTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
